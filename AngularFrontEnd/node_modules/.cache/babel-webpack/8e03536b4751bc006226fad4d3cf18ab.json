{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/piecz/Desktop/kryptowaluty/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DeviceService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this._deviceDtoList = [];\n  }\n\n  get deviceDtoList() {\n    return this._deviceDtoList;\n  }\n\n  set deviceDtoList(deviceDtoList) {\n    this._deviceDtoList = deviceDtoList;\n  } //todo routing to page not found if device absent\n\n\n  postAddDeviceForm(deviceDescritption) {\n    this.httpClient.post(\"/device/add\", deviceDescritption);\n  }\n\n  getDeviceDetails(macAdr) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('fetching data');\n      const t = yield _this.httpClient.get('http://127.0.0.1:9069/device/get/' + macAdr).toPromise();\n      return t;\n    })();\n  }\n\n  fetchDeviceList() {\n    return this.httpClient.get('http://127.0.0.1:9069/device/getall').pipe(tap(response => {\n      this._deviceDtoList = response;\n    }));\n  }\n\n}\n\nDeviceService.ɵfac = function DeviceService_Factory(t) {\n  return new (t || DeviceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDeviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeviceService,\n  factory: DeviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\piecz\\Desktop\\kryptowaluty\\src\\app\\services\\device.service.ts"],"names":[],"mappings":";AAKA,SAAS,GAAT,QAAoB,gBAApB;;;AAKA,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CAAoB,UAApB,EAA0C;AAAtB,SAAA,UAAA,GAAA,UAAA;AAFZ,SAAA,cAAA,GAA8B,EAA9B;AAEuC;;AAE9B,MAAb,aAAa,GAAA;AACf,WAAO,KAAK,cAAZ;AACD;;AAEgB,MAAb,aAAa,CAAC,aAAD,EAA2B;AAC1C,SAAK,cAAL,GAAsB,aAAtB;AACD,GAbuB,CAe1B;;;AAGE,EAAA,iBAAiB,CAAC,kBAAD,EAAwC;AACvD,SAAK,UAAL,CAAgB,IAAhB,CAA2C,aAA3C,EAA0D,kBAA1D;AACD;;AAEK,EAAA,gBAAgB,CAAC,MAAD,EAAe;AAAA;;AAAA;AAEjC,MAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;AACA,YAAM,CAAC,SAAS,KAAI,CAAC,UAAL,CAAgB,GAAhB,CAAiC,sCAAoC,MAArE,EAA6E,SAA7E,EAAhB;AACA,aAAO,CAAP;AAJiC;AAMpC;;AAED,EAAA,eAAe,GAAA;AACd,WAAO,KAAK,UAAL,CAAgB,GAAhB,CACL,qCADK,EACkC,IADlC,CAEJ,GAAG,CAAC,QAAQ,IAAG;AACb,WAAK,cAAL,GAAsB,QAAtB;AACD,KAFE,CAFC,CAAP;AAOA;;AAtCuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { DeviceDescriptionDto } from './../shared/models/device-dto/deviceDescriptionDto.model';\nimport { DeviceDto } from './../shared/models/device-dto/deviceDto.model';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n\n\n  private _deviceDtoList: DeviceDto[] = [];\n\n  constructor(private httpClient: HttpClient) { }\n\n  get deviceDtoList(): DeviceDto[]{\n    return this._deviceDtoList;\n  }\n\n  set deviceDtoList(deviceDtoList: DeviceDto[]){\n    this._deviceDtoList = deviceDtoList\n  }\n\n//todo routing to page not found if device absent\n\n\n  postAddDeviceForm(deviceDescritption:DeviceDescriptionDto){\n    this.httpClient.post<DeviceDescriptionDto>(\"/device/add\", deviceDescritption);\n  }\n\n  async getDeviceDetails(macAdr: String): Promise<any>{\n\n      console.log('fetching data');\n      const t = await this.httpClient.get<DeviceDto[]>('http://127.0.0.1:9069/device/get/'+macAdr).toPromise();\n      return t;\n\n  }\n\n  fetchDeviceList(): Observable<DeviceDto[]>{\n   return this.httpClient.get<DeviceDto[]>(\n     'http://127.0.0.1:9069/device/getall').pipe(\n      tap(response =>{\n        this._deviceDtoList = response;\n      })\n     )\n\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}