{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/piecz/Desktop/kryptowaluty/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DeviceService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this._deviceDtoList = [];\n  }\n\n  get deviceDtoList() {\n    return this._deviceDtoList;\n  }\n\n  set deviceDtoList(deviceDtoList) {\n    this._deviceDtoList = deviceDtoList;\n  } //todo routing to page not found if device absent\n\n\n  getDeviceDetails(macAdr) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      if (!((_a = _this.deviceDtoList) === null || _a === void 0 ? void 0 : _a.length)) {\n        console.log('fetching data');\n        const t = yield _this.httpClient.get('http://127.0.0.1:9069/device/getall').toPromise();\n        console.log(t);\n\n        let foundDevice = _this._deviceDtoList.find(device => device.deviceDescription.macAdr === macAdr);\n      }\n\n      let foundDevice = _this._deviceDtoList.find(device => device.deviceDescription.macAdr === macAdr);\n    })();\n  }\n\n  fetchDeviceList() {\n    return this.httpClient.get('http://127.0.0.1:9069/device/getall').pipe(tap(response => {\n      this._deviceDtoList = response;\n    }));\n  }\n\n}\n\nDeviceService.ɵfac = function DeviceService_Factory(t) {\n  return new (t || DeviceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDeviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeviceService,\n  factory: DeviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\piecz\\Desktop\\kryptowaluty\\src\\app\\services\\device.service.ts"],"names":[],"mappings":";AAGA,SAAS,GAAT,QAAoB,gBAApB;;;AAKA,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CAAoB,UAApB,EAA0C;AAAtB,SAAA,UAAA,GAAA,UAAA;AAFZ,SAAA,cAAA,GAA8B,EAA9B;AAEuC;;AAE9B,MAAb,aAAa,GAAA;AACf,WAAO,KAAK,cAAZ;AACD;;AAEgB,MAAb,aAAa,CAAC,aAAD,EAA2B;AAC1C,SAAK,cAAL,GAAsB,aAAtB;AACD,GAbuB,CAe1B;;;AAGQ,EAAA,gBAAgB,CAAC,MAAD,EAAe;AAAA;;AAAA;;;AACnC,UAAG,EAAC,CAAA,EAAA,GAAA,KAAI,CAAC,aAAL,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,MAArB,CAAH,EACA;AACE,QAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;AACA,cAAM,CAAC,SAAS,KAAI,CAAC,UAAL,CAAgB,GAAhB,CAAiC,qCAAjC,EAAwE,SAAxE,EAAhB;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,CAAZ;;AACA,YAAI,WAAW,GAAG,KAAI,CAAC,cAAL,CAAoB,IAApB,CAAyB,MAAM,IAAI,MAAM,CAAC,iBAAP,CAAyB,MAAzB,KAAoC,MAAvE,CAAlB;AACD;;AACD,UAAI,WAAW,GAAG,KAAI,CAAC,cAAL,CAAoB,IAApB,CAAyB,MAAM,IAAI,MAAM,CAAC,iBAAP,CAAyB,MAAzB,KAAoC,MAAvE,CAAlB;AARmC;AASpC;;AAED,EAAA,eAAe,GAAA;AACd,WAAO,KAAK,UAAL,CAAgB,GAAhB,CACL,qCADK,EACkC,IADlC,CAEJ,GAAG,CAAC,QAAQ,IAAG;AACb,WAAK,cAAL,GAAsB,QAAtB;AACD,KAFE,CAFC,CAAP;AAOA;;AArCuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { DeviceDto } from '../shared/models/device-dto/deviceDto.model';\nimport { Injectable } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n\n\n  private _deviceDtoList: DeviceDto[] = [];\n\n  constructor(private httpClient: HttpClient) { }\n\n  get deviceDtoList(): DeviceDto[]{\n    return this._deviceDtoList;\n  }\n\n  set deviceDtoList(deviceDtoList: DeviceDto[]){\n    this._deviceDtoList = deviceDtoList\n  }\n\n//todo routing to page not found if device absent\n\n\n  async getDeviceDetails(macAdr: String): Promise<DeviceDto>{\n    if(!this.deviceDtoList?.length)\n    {\n      console.log('fetching data');\n      const t = await this.httpClient.get<DeviceDto[]>('http://127.0.0.1:9069/device/getall').toPromise();\n      console.log(t);\n      let foundDevice = this._deviceDtoList.find(device => device.deviceDescription.macAdr === macAdr);\n    }\n    let foundDevice = this._deviceDtoList.find(device => device.deviceDescription.macAdr === macAdr);\n  }\n\n  fetchDeviceList(): Observable<DeviceDto[]>{\n   return this.httpClient.get<DeviceDto[]>(\n     'http://127.0.0.1:9069/device/getall').pipe(\n      tap(response =>{\n        this._deviceDtoList = response;\n      })\n     )\n\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}